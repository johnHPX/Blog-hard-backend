package main

import (
	"database/sql"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strconv"

	"github.com/golang-migrate/migrate/v4"
	"github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/lib/pq"
	"gopkg.in/yaml.v3"
)

type AutoGenerated struct {
	Project struct {
		Name string `yaml:"name"`
		Port string `yaml:"port"`
	} `yaml:"project"`
	Database struct {
		Host string `yaml:"host"`
		User string `yaml:"user"`
		Pswd string `yaml:"pswd"`
		Dbnm string `yaml:"dbnm"`
		Port string `yaml:"port"`
	} `yaml:"database"`
}

func main() {
	log.Println(`
=----------------------------------------------------------=
=  Sintaxe this script:                                    =
=  > go run cmd/migrate/migrate.go COMMAND ALLIED[optional]=
=  COMMAND is up, down and force                           =
=  example:                                                =
=  > go run cmd/migrate/migrate.go up                      =
=  to use force set ALLIED for version                     =
=  example:                                                =
=  > go run cmd/migrate/migrate.go force 3                 =
=----------------------------------------------------------=
	`)
	if len(os.Args) <= 1 {
		log.Println("you need to pass a command!")
		return
	}
	c := &AutoGenerated{}
	path, _ := os.Getwd()
	yamlFile, err := ioutil.ReadFile(fmt.Sprintf("%s/configs/config.yaml", path))
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}
	err = yaml.Unmarshal(yamlFile, c)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	dbhost := c.Database.Host
	dbport := c.Database.Port
	dbuser := c.Database.User
	dbpass := c.Database.Pswd
	dbname := c.Database.Dbnm
	log.Printf("reading to the following database settings:\nHOST: %s\nPORT: %s\nUSER: %s\nPASSWORD: %s\nDBNAME: %s", dbhost, dbport, dbuser, dbpass, dbname)
	stringConnect := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable", dbuser, dbpass, dbhost, dbport, dbname)
	db, err := sql.Open("postgres", stringConnect)
	if err != nil {
		log.Fatal(err)
	}
	err = db.Ping()
	if err != nil {
		log.Fatal(err)
	}
	log.Println("successfully connected")
	path, _ = os.Getwd()
	driver, err := postgres.WithInstance(db, &postgres.Config{})
	m, err := migrate.NewWithDatabaseInstance(fmt.Sprintf("file://%s/migrations", path), "postgres", driver)
	switch {
	case os.Args[len(os.Args)-1] == "up":
		log.Println("up selected")
		err := m.Up()
		if err != nil {
			log.Fatal(err)
		}
	case os.Args[len(os.Args)-1] == "down":
		log.Println("down selected")
		err := m.Down()
		if err != nil {
			log.Fatal(err)
		}
	case os.Args[len(os.Args)-2] == "force":
		log.Println("force selected")
		v, err := strconv.ParseInt(os.Args[len(os.Args)-1], 10, 32)
		if err != nil {
			log.Fatal(err)
		}
		err = m.Force(int(v))
		if err != nil {
			log.Fatal(err)
		}
	}
	log.Println("successful migration")
}
